{"version":3,"sources":["script.js"],"names":["lettersPattern","currentGuessCount","currentGuess","document","querySelector","words","solutionWord","chooseWord","randomItem","Math","floor","random","length","addEventListener","e","keypress","key","test","dataset","letters","updateLetters","deleteFromLetters","submitGuess","_loop","i","setTimeout","revealTile","checkLetter","checkIfGuessComplete","checkWin","jumpTiles","_loop2","classList","add","showSolution","alert","letter","newLetters","currentTile","updateTiles","tileNumber","innerText","oldLetters","slice","deleteFromTiles","remove","position","guessedLetter","charAt","checkLetterExists","includes","state","flipTile","tileNum","tile"],"mappings":"AAAA,aACA,IAAMA,eAAiB,QACnBC,kBAAoB,EACpBC,aAAeC,SAASC,cAAc,SAAWH,mBACjDI,MAAQ,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,SAC/DC,aAAe,GAEbC,WAAa,WAEjB,IAAIC,EAAaC,KAAKC,MAAMD,KAAKE,UAAYN,MAAMO,OAAS,IAAM,EAClEN,aAAeD,MAAMG,IAGvBD,aAIAJ,SAASU,iBAAiB,WAAW,SAACC,GAEpC,IAAIC,EAAWD,EAAEE,IACbf,kBAAoB,IAED,GAAnBc,EAASH,QACTZ,eAAeiB,KAAKH,EAAEE,MACtBd,aAAagB,QAAQC,QAAQP,OAAS,EAGtCQ,cAAcL,GACI,aAATD,EAAEE,KAAsD,IAAhCd,aAAagB,QAAQC,QAEtDE,oBACkB,SAATP,EAAEE,KAAyD,GAAvCd,aAAagB,QAAQC,QAAQP,QAC1DU,kBAKN,IAAMA,YAAc,WAElB,IAFwB,IAAAC,EAAA,SAEfC,GACPC,YAAW,WACTC,WAAWF,EAAGG,YAAYH,MACrB,IAAJA,IAHIA,EAAI,EAAGA,EAAI,EAAGA,IAAKD,EAAnBC,IAOLI,qBAAuB,SAACJ,GACnB,GAALA,GACFK,YAIEC,UAAY,WAGhB,IAHsB,IAAAC,EAAA,SAGbP,GACPC,YAAW,WACStB,SAASC,cACzB,SAAWH,kBAAoB,QAAUuB,EAAI,IAEnCQ,UAAUC,IAAI,UACrB,IAAJT,IANIA,EAAI,EAAGA,EAAI,EAAGA,IAAKO,EAAnBP,IAULK,SAAW,WAEXvB,cAAgBJ,aAAagB,QAAQC,QAGvCM,YAAW,WACTK,cACC,MAGH7B,mBAAwC,EACxCC,aAAeC,SAASC,cAAc,SAAWH,mBAExB,GAArBA,mBACFwB,YAAW,WACTS,iBACC,OAKHA,aAAe,WACnBC,MAAM,4CAA8C7B,eAIhDc,cAAgB,SAACgB,GACrB,IACIC,EADanC,aAAagB,QAAQC,QACRiB,EAC1BE,EAAcD,EAAWzB,OAC7BV,aAAagB,QAAQC,QAAUkB,EAE/BE,YAAYD,EAAaF,IAIrBG,YAAc,SAACC,EAAYJ,GAE/B,IAAIE,EAAcnC,SAASC,cACzB,SAAWH,kBAAoB,OAASuC,GAE1CF,EAAYG,UAAYL,EACxBE,EAAYN,UAAUC,IAAI,eAItBZ,kBAAoB,WAExB,IAAIqB,EAAaxC,aAAagB,QAAQC,QAElCkB,EAAaK,EAAWC,MAAM,GAAI,GAEtCzC,aAAagB,QAAQC,QAAUkB,EAC/BO,gBAAgBF,EAAW9B,SAIvBgC,gBAAkB,SAACJ,GAGvB,IAAIF,EAAcnC,SAASC,cACzB,SAAWH,kBAAoB,OAASuC,GAE1CF,EAAYG,UAAY,GACxBH,EAAYN,UAAUa,OAAO,eAKzBlB,YAAc,SAACmB,GAEnB,IAAIC,EAAgB7C,aAAagB,QAAQC,QAAQ6B,OAAOF,GAKxD,OAAIC,GAJiBzC,aAAa0C,OAAOF,GAKhC,UAIAG,kBAAkBF,GAAiB,UAAY,UAMpDE,kBAAoB,SAACb,GACzB,OAAO9B,aAAa4C,SAASd,IAGzBV,WAAa,SAACF,EAAG2B,GAGrBC,SADc5B,EAAI,EACA2B,GAClBvB,qBAAqBJ,IAGjB4B,SAAW,SAACC,EAASF,GACzB,IAAIG,EAAOnD,SAASC,cAClB,SAAWH,kBAAoB,OAASoD,GAE1CC,EAAKtB,UAAUC,IAAI,WACnBR,YAAW,WACT6B,EAAKtB,UAAUC,IAAIkB,KAClB,KACH1B,YAAW,WACT6B,EAAKtB,UAAUa,OAAO,WACtBS,EAAKtB,UAAUC,IAAI,cAClB,KACHR,YAAW,WACT6B,EAAKtB,UAAUa,OAAO,cACrB","file":"script.js","sourcesContent":["//console.log('keypress');\r\nconst lettersPattern = /[a-z]/; // /^[A-Za-z][A-Za-z0-9]*$/;\r\nlet currentGuessCount = 1;\r\nlet currentGuess = document.querySelector('#guess' + currentGuessCount);\r\nlet words = ['apple', 'baker', 'store', 'horse', 'speak', 'clone', 'bread'];\r\nlet solutionWord = '';\r\n\r\nconst chooseWord = () => {\r\n  // choose random item from words array\r\n  let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\r\n  solutionWord = words[randomItem];\r\n};\r\n\r\nchooseWord();\r\n//console.log('solution word = ' + solutionWord);\r\n\r\n// detect keypress (letter, backspace, enter, other)\r\ndocument.addEventListener('keydown', (e) => {\r\n  //console.log('keypress: ' + e.key);\r\n  let keypress = e.key;\r\n  if (currentGuessCount < 7) {\r\n    if (\r\n      keypress.length == 1 &&\r\n      lettersPattern.test(e.key) &&\r\n      currentGuess.dataset.letters.length < 5\r\n    ) {\r\n      //console.log('is letter');\r\n      updateLetters(keypress);\r\n    } else if (e.key == 'Backspace' && currentGuess.dataset.letters != '') {\r\n      //console.log('is backspace');\r\n      deleteFromLetters();\r\n    } else if (e.key == 'Enter' && currentGuess.dataset.letters.length == 5) {\r\n      submitGuess();\r\n    }\r\n  }\r\n});\r\n\r\nconst submitGuess = () => {\r\n  //console.log('submit guess');\r\n  for (let i = 0; i < 5; i++) {\r\n    setTimeout(() => {\r\n      revealTile(i, checkLetter(i));\r\n    }, i * 200);\r\n  }\r\n};\r\n\r\nconst checkIfGuessComplete = (i) => {\r\n  if (i == 4) {\r\n    checkWin();\r\n  }\r\n};\r\n\r\nconst jumpTiles = () => {\r\n  //console.log('jumpTiles');\r\n  //console.log(currentGuessCount);\r\n  for (let i = 0; i < 5; i++) {\r\n    setTimeout(() => {\r\n      let currentTile = document.querySelector(\r\n        '#guess' + currentGuessCount + 'Tile' + (i + 1)\r\n      );\r\n      currentTile.classList.add('jump');\r\n    }, i * 200);\r\n  }\r\n};\r\n\r\nconst checkWin = () => {\r\n  //console.log('check win');\r\n  if (solutionWord == currentGuess.dataset.letters) {\r\n    // Win\r\n    //console.log('game is won!');\r\n    setTimeout(() => {\r\n      jumpTiles();\r\n    }, 500);\r\n  } else {\r\n    // Not won\r\n    currentGuessCount = currentGuessCount + 1;\r\n    currentGuess = document.querySelector('#guess' + currentGuessCount);\r\n    //console.log('not a win, increment guess count to ' + currentGuessCount);\r\n    if (currentGuessCount == 7) {\r\n      setTimeout(() => {\r\n        showSolution();\r\n      }, 500);\r\n    }\r\n  }\r\n};\r\n\r\nconst showSolution = () => {\r\n  alert('Better luck next time. The solution was: ' + solutionWord);\r\n};\r\n\r\n// Update \"letters\"\r\nconst updateLetters = (letter) => {\r\n  let oldLetters = currentGuess.dataset.letters;\r\n  let newLetters = oldLetters + letter;\r\n  let currentTile = newLetters.length;\r\n  currentGuess.dataset.letters = newLetters;\r\n  //console.log('currentTile = ' + currentTile);\r\n  updateTiles(currentTile, letter);\r\n};\r\n\r\n// Update tile markup\r\nconst updateTiles = (tileNumber, letter) => {\r\n  //console.log('updateTiles(' + tileNumber, letter + ')');\r\n  let currentTile = document.querySelector(\r\n    '#guess' + currentGuessCount + 'Tile' + tileNumber\r\n  );\r\n  currentTile.innerText = letter;\r\n  currentTile.classList.add('has-letter');\r\n};\r\n\r\n// Backspace -- Delete last letter\r\nconst deleteFromLetters = () => {\r\n  // remove last letter from data-letters\r\n  let oldLetters = currentGuess.dataset.letters;\r\n  //console.log('oldLetters = ' + oldLetters);\r\n  let newLetters = oldLetters.slice(0, -1);\r\n  //console.log('newLetters = ' + newLetters);\r\n  currentGuess.dataset.letters = newLetters;\r\n  deleteFromTiles(oldLetters.length);\r\n};\r\n\r\n// Backspace -- Delete last tile markup\r\nconst deleteFromTiles = (tileNumber) => {\r\n  // remove markup from last tile\r\n  //console.log('deleteFromTiles = ' + tileNumber);\r\n  let currentTile = document.querySelector(\r\n    '#guess' + currentGuessCount + 'Tile' + tileNumber\r\n  );\r\n  currentTile.innerText = '';\r\n  currentTile.classList.remove('has-letter');\r\n};\r\n\r\n// Check letter to solution\r\n// parameter = letter position in word\r\nconst checkLetter = (position) => {\r\n  //console.log('checkLetter');\r\n  let guessedLetter = currentGuess.dataset.letters.charAt(position);\r\n  let solutionLetter = solutionWord.charAt(position);\r\n  //console.log(guessedLetter, solutionLetter);\r\n\r\n  // If letters match, return \"correct\"\r\n  if (guessedLetter == solutionLetter) {\r\n    return 'correct';\r\n  }\r\n  // If not a match, if letter exists in solution word, return \"present\"\r\n  else {\r\n    return checkLetterExists(guessedLetter) ? 'present' : 'absent';\r\n  }\r\n\r\n  // If not a match, if letter doesn't exist in solution, return \"absent\"\r\n};\r\n\r\nconst checkLetterExists = (letter) => {\r\n  return solutionWord.includes(letter);\r\n};\r\n\r\nconst revealTile = (i, state) => {\r\n  //console.log('revealTile = ' + i, state);\r\n  let tileNum = i + 1;\r\n  flipTile(tileNum, state);\r\n  checkIfGuessComplete(i);\r\n};\r\n\r\nconst flipTile = (tileNum, state) => {\r\n  let tile = document.querySelector(\r\n    '#guess' + currentGuessCount + 'Tile' + tileNum\r\n  );\r\n  tile.classList.add('flip-in');\r\n  setTimeout(() => {\r\n    tile.classList.add(state);\r\n  }, 250);\r\n  setTimeout(() => {\r\n    tile.classList.remove('flip-in');\r\n    tile.classList.add('flip-out');\r\n  }, 250);\r\n  setTimeout(() => {\r\n    tile.classList.remove('flip-out');\r\n  }, 1500);\r\n};\r\n/*\r\n- if keypress is a letter\r\n  - update \"letters\" attribute\r\n    - update tile markup based on \"letters\" value\r\n- if keypress is backspace\r\n  - delete last letter in \"letters\"\r\n    - update tile markup based on \"letters\"\r\n*/\r\n"]}